var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [FastPriorityQueues]","category":"page"},{"location":"api/#FastPriorityQueues.VectorPriorityQueue","page":"API reference","title":"FastPriorityQueues.VectorPriorityQueue","text":"VectorPriorityQueue{K,V}\n\nPriority queue stored with keys of type K and priority values of type V, stored as a couple of vectors.\n\nFields\n\nkeys::Vector{K}: item keys, sorted according to their priority values\nvalues::Vector{V}: priority values, sorted by increasing order\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FastPriorityQueues","category":"page"},{"location":"#FastPriorityQueues.jl","page":"Home","title":"FastPriorityQueues.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for FastPriorityQueues.jl, which contains possibly faster alternatives to the priority queue from DataStructures.jl","category":"page"},{"location":"#Why-this-package?","page":"Home","title":"Why this package?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The PriorityQueue provided by DataStructures.jl relies on a dictionary, which can be inefficient for small queues. There have been a number of Discourse topics on this issue (2020/07, 2021/01, 2021/09), but sofar it looks like alternative implementations are scattered through specific packages. The goal of FastPriorityQueues.jl is to make my own version available under an easily discoverable name.","category":"page"},{"location":"#Benchmarks","page":"Home","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As of right now, my VectorPriorityQueue is not as efficient as PriorityQueue. Work in progress...","category":"page"}]
}
